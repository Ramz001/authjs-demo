// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum TokenType {
  PasswordReset
  TwoFactor
  Verification
}

model User {
  id                       String          @id @default(cuid())
  full_name                String?
  email                    String          @unique
  email_verified           DateTime?
  phone_number             String?         @unique
  phone_verified           Boolean         @default(false)
  password_hash            String?
  role                     UserRole        @default(USER)
  image                    String?
  email_verification_token String?
  password_reset_token     String?
  password                 String?
  last_login               DateTime?
  accounts                 Account[]
  sessions                 Session[]
  authenticators           Authenticator[]
  created_at               DateTime        @default(now())
  updated_at               DateTime        @updatedAt
  mfa_enabled              DateTime
}

model Account {
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  user                User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([provider, provider_account_id])
}

model Session {
  session_token String   @unique
  user_id       String
  expires       DateTime
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model Token {
  id         String
  type       TokenType @default(Verification)
  token      String
  expires    DateTime
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  @@id([id, token])
}

model Authenticator {
  credential_id          String   @unique
  user_id                String
  provider_account_id    String
  credential_public_key  String
  counter                Int
  credential_device_type String
  credential_backed_up   Boolean
  transports             String?
  user                   User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt

  @@id([user_id, credential_id])
}
