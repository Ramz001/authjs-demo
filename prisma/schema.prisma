// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum TokenType {
  PasswordReset
  TwoFactor
  Verification
}

model User {
  id              String          @id @default(cuid())
  fullName        String?         @map("full_name")
  email           String          @unique
  emailVerifiedAt DateTime?       @map("email_verified_at")
  phoneNumber     String?         @unique @map("phone_number")
  phoneVerifiedAt DateTime?       @map("phone_verified_at")
  role            UserRole        @default(USER)
  image           String?
  password        String?
  lastLogin       DateTime?       @map("last_login")
  accounts        Account[]
  sessions        Session[]
  authenticators  Authenticator[]
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  mfaEnabledAt    DateTime?       @map("mfa_enabled_at")
  tokens          Token[]
}

model Account {
  id                String   @id @default(uuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refreshToken      String?  @map("refresh_token")
  accessToken       String?  @map("access_token")
  expiresAt         Int?     @map("expires_at")
  tokenType         String?  @map("token_type")
  scope             String?
  idToken           String?  @map("id_token")
  sessionState      String?  @map("session_state")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @map("user_id")
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId])
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType @default(Verification)
  userId    String    @map("user_id")
  token     String    @unique
  expires   DateTime
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([type])
  @@index([expires])
}

model Authenticator {
  credentialId         String   @unique @map("credential_id")
  userId               String   @map("user_id")
  providerAccountId    String   @map("provider_account_id")
  credentialPublicKey  String   @map("credential_public_key")
  counter              Int
  credentialDeviceType String   @map("credential_device_type")
  credentialBackedUp   Boolean  @map("credential_backed_up")
  transports           String?
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  @@id([userId, credentialId])
}
